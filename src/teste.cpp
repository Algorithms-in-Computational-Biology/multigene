#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include "nnparams.h"
#include "thermalign.h"
#include "dinkelbach.h"
#include "multigene.h"

float primerConcentration = 0.000001;
float templateConcentration = 0.000001;
float saltConcentration = 1; // K
float t = 37.0f; // Temperature in C

float efficiency[4][4] = {{0.0130, 0.3359, 0.0019, 1},
                          {0.1842, 0.0101, 1,      0.1928},
                          {0.0206, 1,      0.0377, 0.1495},
                          {1,      0.3035, 0.4501, 0.0150}};

/*
    char complement;
    switch(base) {
        case 'A':
	    complement = 'T';
            break;
        case 'C':
	    complement = 'G';
            break;
        case 'G':
	    complement = 'C';
            break;
        case 'T':
	    complement = 'T';
            break;

        return complement;
    }
*/
char getComplementaryBase(char base)
{
    if (base == 'A')
    {
        return 'T';
    }
    else if (base == 'G')
    {
        return 'C';
    }
    else if (base == 'C')
    {
        return 'G';
    }
    else if(base == 'T')
    {
        return 'A';
    }
    return 'A';
}

char* calculateComplement(char *sequence, int n)
{
    register int i;
    char* complement = (char*) malloc((n + 1)*sizeof(char));
    for (i = 0; i < n; i++)
    {
        complement[i] = getComplementaryBase(sequence[i]);
    }
    complement[n] = '\0';

    return complement;
}

char* calculateReverse(char *sequence, int n)
{
    register int i;
    char* reverse = (char*) malloc((n + 1)*sizeof(char));
    for (i = n - 1; i >= 0; i--)
    {
        reverse[n - i - 1] = sequence[i];
    }
    reverse[n] = '\0';

    return reverse;
}

char* calculateReverseComplement(char *sequence, int n)
{
    register int i;
    char* reverse = (char*) malloc((n + 1)*sizeof(char));
    for (i = n - 1; i >= 0; i--)
    {
        reverse[n - i - 1] = getComplementaryBase(sequence[i]);
    }
    reverse[n] = '\0';

    return reverse;
}

int convertBase(char base) {
    if (base == 'A') {
        return 1;
    } else if (base == 'C') {
        return 2;
    } else if (base == 'G') {
        return 3;
    } else {
        return 4;
    }
}

float calculateElongationEfficiency(char target, char primer) {
	int i = convertBase(target);
	int j = convertBase(primer);

	return efficiency[i - 1][j - 1] * 100;
}

char *addSigns(char *sequence)
{
    int n = strlen(sequence);
    char *str = (char*) malloc((n + 3) * sizeof(char));
    str[0] = '$';
    for(int i = 0; i < n; i++)
    {
        str[i + 1] = sequence[i];
    }
    str[n + 1] = '$';
    str[n + 2] = '\0';

    return str;
}

bool isPerfectComplement(char *target, char *primer)
{
    register int k;
    int primerLength = strlen(primer);
    int targetLength = strlen(target);
    if (targetLength != primerLength)
    {
        return false;
    }
    for(k = 0; k < primerLength; k++)
    {
        if (primer[k] != getComplementaryBase(target[k]))
        {
            return false;
        }
    }
    return true;
}

float calculateMeltingTemperature (char *target1, char *primer1, PNNParams params)
{
    char *target = addSigns(target1);
    char *primer = addSigns(primer1);

    int primerLength = strlen(primer);
    int targetLength = strlen(target);

    CThermAlign tAlign(targetLength, primerLength, params);
    tAlign.InitStrings(target, primer, targetLength, primerLength);
    tAlign.CalculateTable();
    float temperature;
    if (isPerfectComplement(target, primer))
    {
        temperature = tAlign.GetMeltingTempC(tAlign.maxloci, tAlign.maxlocj);
    }
    else
    {
        float tempK = tAlign.GetMeltingTempK(tAlign.maxloci, tAlign.maxlocj);
        GAlign gAlign(targetLength, primerLength,params);

        gAlign.InitStrings(target, primer, targetLength, primerLength);
        dinkelbach dinkel(params, &gAlign);
        dinkel.iteration(tempK);
        temperature =  gAlign.GetMeltingTempC(gAlign.maxloci, gAlign.maxlocj);
    }
    free(target);
    free(primer);

    return temperature;
}

float calculateFreeEnergy(char *target1, char *primer1, PNNParams params, float t)
{
    char *target = addSigns(target1);
    char *primer = addSigns(primer1);

    int primerLength = strlen(primer);
    int targetLength = strlen(target);

    CThermAlign tAlign(targetLength, primerLength, params);
    tAlign.InitStrings(target, primer, targetLength, primerLength);
    tAlign.CalculateTable();

    float tempK = tAlign.GetMeltingTempK(tAlign.maxloci, tAlign.maxlocj);
    GAlign gAlign(targetLength, primerLength,params);

    gAlign.InitStrings(target, primer, targetLength, primerLength);
    dinkelbach dinkel(params, &gAlign);
    dinkel.iteration(tempK);

    free(target);
    free(primer);

    return -gAlign.GetFreeEnergyK(gAlign.maxloci, gAlign.maxlocj, t + 273.0f);
}

BasePair *calculateThermodynamicAlignment(char *target1, char *primer1, PNNParams params)
{
    char *target = addSigns(target1);
    char *primer = addSigns(primer1);

    int primerLength = strlen(primer);
    int targetLength = strlen(target);

    CThermAlign tAlign(targetLength, primerLength, params);
    tAlign.InitStrings(target, primer, targetLength, primerLength);
    tAlign.CalculateTable();
    float tempK = tAlign.GetMeltingTempK(tAlign.maxloci, tAlign.maxlocj);

    GAlign gAlign(targetLength, primerLength,params);
    gAlign.InitStrings(target, primer, targetLength, primerLength);
    dinkelbach dinkel(params, &gAlign);
    dinkel.iteration(tempK);
    gAlign.OutputLocalAlignment(cout);

    free(target);
    free(primer);

    //printf("Tm = %.2f °C \n", gAlign.GetMeltingTempC(gAlign.maxloci, gAlign.maxlocj));
    //printf("dH = %.2f cal/mol\n", gAlign.GetEnthalpy(gAlign.maxloci, gAlign.maxlocj));
    //printf("dS = %.2f cal/K.mol (e.u)\n", gAlign.GetEntropy(gAlign.maxloci, gAlign.maxlocj));
    //printf("dG = %.2f kcal/mol at 37 °C\n", -gAlign.GetFreeEnergyK(gAlign.maxloci, gAlign.maxlocj, t + 273.0f)/1000); // Temperature in K

    BasePair *pairs = (BasePair*) malloc(2 * sizeof(BasePair));
    memcpy(pairs, gAlign.basePairs, 2 * sizeof(BasePair));

    return pairs;
}



int main(void)
{
    PNNParams params = new CNNParams();
    params->InitParams(primerConcentration, templateConcentration, saltConcentration, SALT_METHOD_SANTALUCIA);

    int m = 1;
    //TACTACTCAATACCGTGTACCG
    //char target[] = "ATGGCGGTGGCTTCGACCTCGCCGCTATCCGCCACGGCCCCCTCGCCGCCCGCTCCGGTGTCCGGGTTCCTCGCTCTCCCCGCCCGCCGCGGCTGCGCAACGCGCCTCGGCTCCGCCGCCGCGTGGAGGAGGCTTCGCGTGGAGGCGATCTGGAAGCAGCAGGAGAAGCAGCGGGCAGAGGTGTCCGTCGAGGAACCCGCCCCCGTCAGGGAGGCCGCCGCGCCCCTGGACGGAGTCGGAGCTGACGACCCCATGGTTCCTTCCTCGGACGAGAGCTGGGTGGTCAGGCTCGAGCAGTCGGTCAACATTTTCCTCACGGAATCGGTGATTATACTACTCAATACCGTGTACCGTGATCGGAACTACGCCAGGTTTTTTGTGCTGGAGACGATTGCCAGGGTGCCGTATTTCGCGTTCATATCGGTGCTTCACATGTATGAAACCTTTGGCTGGTGGAGACGAGCTGATTATCTAAAAGTTCACTTTGCGCAGAGCTTGAACGAGTTTCATCATCTCTTGATCATGGAAGAATTGGGTGGCAACGCTATATGGATTGATTGTTTCCTTGCTCGATTTATGGCGTTTTTTTACTACTTCATGACTGTTGCGATGTACATGTTGAGCCCACGAATGGCATATCACTTCTCTGAATGTGTGGAGAGACATGCGTACTCCACCTATGATAAGTTCCTCAAGCTCCATGAAGAGGAATTGAAAACACTACCAGCTCCAGAGGCAGCATTGAACTATTACCTGAATGAGGACCTTTACTTATTTGATGAGTTTCAGACAACAAGAATTCCATGTTCTAGGAGGCCTAAAATAGATAACTTGTATGATGTATTCGTCAATATACGAGATGACGAGGCAGAGCACTGCAAGACAATGAAGGCATGTCAAACACATGGAACTCTTCGTTCTCCTCACTCAATGCCGAACTGCTTAGAAGCTGCTACAGAATGTGTAATACCTGAAAACGATTGTGAAGGTATTGTGGACTGTGTCAAAAAGTCCCTTACAAAGTAA";
    //char* targets[m] = {"ATGGCGGTGGCTTCGACCTCGCCGCTATCCGCCACGGCCCCCTCGCCGCCCGCTCCGGTGTCCGGGTTCCTCGCTCTCCCCGCCCGCCGCGGCTGCGCAACGCGCCTCGGCTCCGCCGCCGCGTGGAGGAGGCTTCGCGTGGAGGCGATCTGGAAGCAGCAGGAGAAGCAGCGGGCAGAGGTGTCCGTCGAGGAACCCGCCCCCGTCAGGGAGGCCGCCGCGCCCCTGGACGGAGTCGGAGCTGACGACCCCATGGTTCCTTCCTCGGACGAGAGCTGGGTGGTCAGGCTCGAGCAGTCGGTCAACATTTTCCTCACGGAATCGGTGATTATACTACTCAATACCGTGTACCGTGATCGGAACTACGCCAGGTTTTTTGTGCTGGAGACGATTGCCAGGGTGCCGTATTTCGCGTTCATATCGGTGCTTCACATGTATGAAACCTTTGGCTGGTGGAGACGAGCTGATTATCTAAAAGTTCACTTTGCGCAGAGCTTGAACGAGTTTCATCATCTCTTGATCATGGAAGAATTGGGTGGCAACGCTATATGGATTGATTGTTTCCTTGCTCGATTTATGGCGTTTTTTTACTACTTCATGACTGTTGCGATGTACATGTTGAGCCCACGAATGGCATATCACTTCTCTGAATGTGTGGAGAGACATGCGTACTCCACCTATGATAAGTTCCTCAAGCTCCATGAAGAGGAATTGAAAACACTACCAGCTCCAGAGGCAGCATTGAACTATTACCTGAATGAGGACCTTTACTTATTTGATGAGTTTCAGACAACAAGAATTCCATGTTCTAGGAGGCCTAAAATAGATAACTTGTATGATGTATTCGTCAATATACGAGATGACGAGGCAGAGCACTGCAAGACAATGAAGGCATGTCAAACACATGGAACTCTTCGTTCTCCTCACTCAATGCCGAACTGCTTAGAAGCTGCTACAGAATGTGTAATACCTGAAAACGATTGTGAAGGTATTGTGGACTGTGTCAAAAAGTCCCTTACAAAGTAA",
    //	       "ATGGCGGTGGCCTCGACCTCGCCGCTGTCCGCCAAGCCCGCCACGGCCCCTTCGCCGCCCGCTCCCGGATCCGGGCTCCTCGCTCTCGGCGTTCGCCGCGCCCCCGCCACTGCCGCGTGGAGGAGGCTCCGCGTGGAGGCGATCAGGACGCAGCGAACGGAGGTGCCCGTCGAGGAGTCCGCCCCCGCCAGGGACGCCGCCGCTGCCGCGCCCCTGGACGGAAACGGAGCCGGAGCGGACGGCTCCGTGGTTCCTTCCTCGGACGACAGCTGGGTTGTCAAGCTCGAGCAGTCGTTCAACATTTTCGCCACGGATTCGGTGATTATGGTACTCAAGGGCGTGTACGGTGATCGGTACTACGCCAGGTTCTTTGCGCTGGAGACGATTGCGAGGGTGCCGTACTTCGCATTCATATCGGTGCTTCACTTGTATGCGACCTTTGGATGGTGGAGACGAGCTGATTACATAAAGGTTCACTTTGCGCAGAGCTGGAACGAGTTCCATCACCTCTTGATCATGGAAGAATTGGGTGGCGACTCTTTGTGGTTTGACTGTTTTCTTGCTCGGTTTATGGCATTCTTTTACTACTTCATGACTGTTGCAATGTACATGCTGAGCCCACGAATGGCATATCACTTTTCCGAATGTGTGGAGAGACATGCATATTCCACCTATGATGAGTTCCTCAAGCTCCATGAAGAGGAATTGAAAAGACTACCAGCTCCAGAGGCAGCATTGAACTATTACATGAATGAGGACCTTTACTTATTCGATGAGTTTCAGGCATCAAGAACTCCAGGTTCTAGGAGGCCTAAAATAGATAACTTATACGATGTATTCGTTAATATACGAGAAGATGAGGCAGAGCACTGCAAGACAATGAAGACCTGTCAAACACATGGAAATCTTCGTTCTCCTCATTCAACGCCGAACTGCTTAGAAGATGATACGGAATGTGTAATACCTGAAAACGACTGTGAAGGTATTGTGGACTGTGTCAAAAAGTCCCTTACAAAGTAA"};

    /*char* targets[m] = {"ATGAATCATAGTGCTGCAGCAAAATTATCCAGGTCGATTATATCTCAACTTAGTACTCGCGGCTTCTCAACAGCATCAATAAACTCTTCTGAAACCGCCCAAATCTTTGCCAGAGTGAGGCCTGCGTTCGGTACCCGGAATCTGAGTACTTCTGTTTCCCCCAATGGCTCGCCAAAGGACGAGAAAAATAACTCTGTCAGCTCTGACAAGTCGCCTGACGATAAGATCATTGGGAGCTATTGGGGCGTGGCACCCGCTAAGCTGACTAAAGAAGACGGTTCCGCCTGGAAATGGAATTGCTTCAGGCCCTGGGACACCTACACAGCGGACGTCTCCATTGATGTGACAAAGCACCACAAACCAGAAAACTTCAGGGATAAATTTGCTTACTGGACTGTCCAGACTCTCAAATACCCAACTCATTTATTCTTTCAGAGGCGCCACATGTGTCATGCAATGTTACTAGAGACAGTGGCGGCAGTTCCCGGAATGGTTGGAGGGATGCTTTTGCATTTCAAATCGCTGAGGCGATTCGAACACAGCGGCGGATGGATAAAAGCTCTACTTGAAGAAGCTGAAAACGAGCGTATGCATTTGATGACATTCATAGATTTGGCGAAGCCTGCCTGGTACGAACGTGCCCTTGTTTTTGCAGTCCAAGGAGTGTTTTTCAATGCATATTTTCTGGCCTACTTGGCTTCTCCAAAGCTCGCTCACCGCATAGTGGGCTACTTGGAAGAAGAAGCAGTGATATCTTACAGTGAATTCCTCAAAGATTTGGACAATGGTAGCTTTGAAAATGTCCCGGCTCCGGCAATCGCCATTGATTACTGGCGTTTGCCTCCGGATTCAACTCTCCGAGATGTTGTTGTGGTCATCAGAGCCGATGAGGCTCACCACCGTGACCTTAACCACTATGCATCGGATATTCAATGTCAAGGACATGAGCTCAAGGAAGCACCAGCGCCGATAGGATATCATTAA",
                        "ATGTTGGCTGTGTTGGCTCCTCGATTGTTCTCCTCTGTAACCACTCGTGTGGTGACGGTGAGCCGATGGCAACCACGATGGTGACTGGTTACAAGCTTGGGATTGTTCACGTGAGAAACTGGAGCACTGTGGCTGTAGGTGAGAAGGAGCAGGAGGAGAAGAAACAGGCGACGGAAACAGCCGGTGTCGGTAACAACAAGGAAGAGAAAAGGATCGGAGTTACTGGGGTGTGGAAGTTCCGAAGGTCACTAAAGAAGATGGGACTGAATGGCGATGGAACTGCTTTAGGCCATGGGAGACTTACAAAGCTGACTTATCCATTGATCTGAAGAAACACCATGCGCCAGCAACATTTTTGGACAAAATGGCCTTTTGGACCGTGAAAGCTCTAAGATGGCCAACTGATTTGTTCTTCCAGAGGAGATATGGGTGCCGGGCAATGATGCTTGAGACGGTGGCAGCCGTGCCGGGAATGGTGGGAGGCTTGCTGTTGCACTGCAAGTCATTGAGGAAATTTGAGCACAGCGGGGGCTGGATCAAGGCGCTTTTGGAAGAAGCCGAAAACGAGAGAATGCATCTAATGACTTTCATGGAGGTGGCCAAGCCCAgGTGGTACGAGAGGGCTCTGGTTTTCGCAGTCCAAGGTGTATTCTTCAACGCCTACTTCCTGGGCTATTTGATCTCTCCGAAATTCGCTCACCGCATGGTCGGCTACCTGGAAGAAGAAGCAATTCACTCaTACACAGAATTCCTCAAAGAATTGGACAAAGGTAACATTGAAAACGTCCCAGCTCCTGCAATCGCCATAGACTACTGGCAAATGTCTCCGGACTCCACCTTgCGTGATGTTGTGATGGTGGTGAGAGCCGATGAGGCCCATCACCGaGATGTCAATCACTTCGCATCGGATGTACACTATCAAGGACGTGAACTGAGGGAGGCGCCAGCGCCAATTGGGTATCACTAA",
                        "TTCTAATTTTCTCAGAGAAATGGCGTTTGTAAGGATTGTCGGTGATGCGAGGTCTTTTAAACGGCGGGAGGTACAGAAACCGGCACATTTGGACAGCGGTTTCCAGACGGCAGCTGGAGGTTTTGGAGAGAAACGGCTTGCGGTCTGCAGTTATGCAGCGTGGCGCTGAAGCGCAAGTGAAAGAGAAGAAAGAGGAAACGGAAAAGAAAGATGCCATGGTGTCCAGTTATTGGGGAATTGCCAGGCCAAAGATCACCAGAGAGGACGGCACTCTTGGAATTGCTTCATGCCATGGGAAACTGATCAGTTGGACTTATCTATTGATTTGAAGAAGCATCATGTTCCAAGGACATTTCTGGATAAATTTGCATACAAGACTGTCAAAATCCTTCGAGCTCCAACTGATATCTTTTTTCAGAGACATTATGGGTGTCGGGCAATGATGCTAGAAACTGTGGCTGCTGTGCCTGGAATAGTTGGGGGGATGCTGCTGCGTCTGAAGTCTCTCCGCAAGCTAGAGCAAAGTGGTGGCTGGGTCAAAGCCTTGCTCGAAGAAGCAGAGAATGAGAGGATGCATCTCATGACCATGGTGGAGCTTGTGCAGCCTAAATGGTATGAGAGGCTCCTGGTTCTTGCTGTGCAGGGAGTCCTTTTTAACTCTTTCTTTGTACTTTATGTACTCTCTCCCAAACTGGCACATAGAATTGTTGGGTACTTGGAGGAGGAAGCTATCCACTCGTATACAGAATATCTCAAGGATATTAGTAGCAGTGCAATTGAAAATGTTCCAGCCCCAGCTATCGCAATTGACTACTGGAGACTACCCAAGGATGCCACTCTTAAGGATGTTGTCACTGTGATCCGTGCTGGTAAGGCTCATCGCCGTGATGTCAACCATTTTGCTTCTAATATACAAGTTAAGGGGAAGGAATTGAGAGAAGCTCCGGCCCTCCCTTGGTTACATGGAGGCTTATTTTTCTGTTCAGGGTATAATTTCACTTTTGTATATGCTGCGGATGTACATAGGAGTCATAAATATGAACATAAATACTAAATAGTATACCGTACATGCATCTGTTGTAACAGAAAACAAATTATTGCAT",
                        "TCTCAGGGAAATGGACTTTGTAACGATGACGATGATGCGAGGTATTTTAAATGGCGGGAGATCCGGCAACCGGTACATTTGGACGGCGGTTTCCAGACGGCAGCCCGAGGTTGTGGAGAGAAGCCGGTTGCAGTCTGCTGTTATGCAGTGGAGGAGGATGCTGAGCAGCAGCGGTGGAGCCGAATCGCAAGTGAAAGATGAGAAAGAGGAGAAGAAAGATGCGATGGTATCCAGTTACTGGGGAATTGCGAGGCCAAAGATCACCAGAGAGGACGGAACTGAGTGGCCTTGGAACTGCTTCATGCCATGGGAAACTTACCAGTCAAACTTATCTATTGATTTGAAGAAGCATCATGTACCAAGGACATTTCTGGATAAATTTGCATACAGGACTGTCAAAATCCTTAGAGTTCCAACTGATATCTTTTTTCAGAGACGTTATGGGTGTCGGGCAATGATGCTAGAAACTGTGGCTGCTGTGCCCGGAATGGTTGGAGGGATGTTGCAGCATCTGAAGTCTCTCCGCAAGATGGAACAAAGCGGTGGCTGGATCAAAGCCTTGCTTGAAGAAGCAGAGAATGAGAGGATGCATCTGATGACCATGGTGGAGCTTGTGCAGCCTCAATGGTATGAGAGGCTGCTGGTTCTTGCTGTGCAGGGAGTCTTCTTTAACTCATTCTTTGTGCTTTATGTACTCTCTCCCAAACTGGCACATAGAATTGTGGGGTATTTGGAGGAGGAAGCTATCCACTCGTATACAGAATATCTCAAGGATATCGATAGTGGTGCAATCGAAAATGTTCCAGCCCCAGCTATTGCAATTGACTACTGGAGACTTCCTAAGGATGCCACTCTCAAGGATGTTATCACTGTGATCCGTGCTGATGAGGCTCATCATCGCGATGTCAACCATTTTGCTTCTGATATACAAGTTCAGGGAAAGGAGTTGAGAGAGGCACCGGCCCCCCTTGGCTACCATTGAGGGCTATTTCACTGTTCAGGGTATAATTTCACTTTTGCATATGGCGAAAATAGTATATCAGTACTACTGTAGGAGTATGAAAATTGTATCTGCGGGAAACGAAAACAAATTATTGTATGTTGTGTATTATAACTTGATTGAATTTAACAAGCATTAAAGCTATAGAGATAATGCGTTTCTT",
                        "TGGCCGTGCTTGGTCCTCGTTTGTTCTCCTCTGTTACCACTCGTGCGGTGTGCGGAGAGTCGGCGGCTACCTGGATTCTGACCGGTTACAATTACAAGCTTGGGATTCTTGGCGTGAGAAATAGGAGCACTTCGGCTTTTCATGTGAAGGAACAGAAGGAGGAGCAGAATGCGAAGGTAACCACCGGTGACGGTAACAATAACGAAGAGAAGAAGCTCACGAGTTACTGGGGTCTGGAAGCTCCTAAGTTCACCAAAGAAGATGGTACTTCATGGCCGTGGACCTGCTTTACGCCATGGGAGACTTACAGAGCTAACTTATCCATTGATCTGGAGAAACACCATGCGCCTGCAAAATTTATGGACAAAATGGCTTTTTGGATGGTCAAAATTCTCAGATGGCCTACTGATTTATTCTTTCAGAGGAGATTTGGCTGCCGGGCAATGATGCTCGAAACCGTGGCGGCAGTGCCTGGAATGGTGGGAGGCGTGCTGTTACACTGCAAGTCATTGAGGAAATTCGAGCAAAGCGGCGGCTGGATCAAGGCACTTTTGGAAGAAGCCGAGAATGAGAGAATGCACCTCATGACTTTCATGGAGGTCACAAAGCCCAGATGGTATGACAGAGCTCTGGTTTTGGTAGTCCAAGGTATATTCTTCAATGCATACTTTTTAGGCTATATGATTTCTCCGAAATTCGCTCACCGCGTGGTTGGGTACCTCGAAGAAGAAGCCATTCATTCTTACACAGAATTTCTCAAGGAATTGGACAACGGTAACATTGAAAATGTACCTGCTCCGGCGATTGCCCTTGATTACTGGCGTCTGCCTCCGGGATCAACTCTTCGTGATGTGGTGATGGTCGTCAGAGCCGATGAGGCCCACCACCGCGATGTCAATCACTTTGCATCGGATATCCATTGTCAAGGGCATGACTTGAGAGAGTGCGCAGCGCCGATTGGGTATCACTGACATGTTAAAA",
                        "TGGCCGTGCTTGGTCCTCGTTTGTTCTCCTCTGTTACCACTCGTGCGGTGTGCGAAGAGTCGGCTGCTACCTGGATTCTGACCGGTTACAATTACAAGCTTGGGATTCTTGGCGTGAGAAATAGGAGCACTTCGGCTTTTCATGTGAAGGAACAGAAGGAGGAGCAGAATGCGAAGGTAACCACCGGTGACGGTAACAATAACGAAGAGAAGAAGCTCACGAGTTACTGGGGTCTGGAAGCTCCTAAGTTCACCAAAGAAGATGGTACTTCATGGCCGTGGACCTGCTTTACGCCATGGGAGACTTACAGAGCTAACTTATCCATTGATCTGGAGAAACACCATGCGCCTGCAAAATTTATGGACAAAATGGCTTTTTGGATGGTCAAAATTCTCAGATGGCCTACTGATTTATTCTTTCAGAGGAGATTTGGCTGCCGGGCAATGATGCTCGAAACCGTGGCGGCAGTGCCTGGAATGGTGGGAGGCGTGCTGTTACACTGCAAGTCATTGAGGAAATTCGAGCAAAGCGGCGGCTGGATCAAGGCACTTTTGGAAGAAGCCGAGAATGAGAGAATGCACCTCATGACTTTCATGGAGGTCACAAAGCCCAGATGGTATGACAGAGCTCTGGTTTTGGTAGTCCAAGGTATATTCTTCAATGCATACTTCTTAGGCTATATGATTTCTCCGAAATTCGCTCACCGCGTGGTAGGGTACCTCGAAGAAGAAGCCATTCATTCTTACACAGAATTTCTCAAGGAATTGGACAAAGGTAACATTGAAAATGTACCTGCTCCGGCAATTGCCCTTGATTACTGGCGCCTGCCTCCGGGATCAACTCTTCGTGATGTGGTGATGGTCGTCAGAGCCGATGAGGCCCACCACCGCGATGTCAATCATTTTGCATCGGATATCCATTGTCAAGGGCATGACTTGAGAGAGTGCGCAGCGCCGATTGGGTATCACTGACATGTTAAAA"
                       };*/

    //char* targets[m] = {"ATGTTGGCTGTGTTGGCTCCTCGATTGTTCTCCTCTGTAACCACTCGTGTGGTGACGGTGAGCCGATGGCAACCACGATGGTGACTGGTTACAAGCTTGGGATTGTTCACGTGAGAAACTGGAGCACTGTGGCTGTAGGTGAGAAGGAGCAGGAGGAGAAGAAACAGGCGACGGAAACAGCCGGTGTCGGTAACAACAAGGAAGAGAAAAGGATCGGAGTTACTGGGGTGTGGAAGTTCCGAAGGTCACTAAAGAAGATGGGACTGAATGGCGATGGAACTGCTTTAGGCCATGGGAGACTTACAAAGCTGACTTATCCATTGATCTGAAGAAACACCATGCGCCAGCAACATTTTTGGACAAAATGGCCTTTTGGACCGTGAAAGCTCTAAGATGGCCAACTGATTTGTTCTTCCAGAGGAGATATGGGTGCCGGGCAATGATGCTTGAGACGGTGGCAGCCGTGCCGGGAATGGTGGGAGGCTTGCTGTTGCACTGCAAGTCATTGAGGAAATTTGAGCACAGCGGGGGCTGGATCAAGGCGCTTTTGGAAGAAGCCGAAAACGAGAGAATGCATCTAATGACTTTCATGGAGGTGGCCAAGCCCAgGTGGTACGAGAGGGCTCTGGTTTTCGCAGTCCAAGGTGTATTCTTCAACGCCTACTTCCTGGGCTATTTGATCTCTCCGAAATTCGCTCACCGCATGGTCGGCTACCTGGAAGAAGAAGCAATTCACTCaTACACAGAATTCCTCAAAGAATTGGACAAAGGTAACATTGAAAACGTCCCAGCTCCTGCAATCGCCATAGACTACTGGCAAATGTCTCCGGACTCCACCTTgCGTGATGTTGTGATGGTGGTGAGAGCCGATGAGGCCCATCACCGaGATGTCAATCACTTCGCATCGGATGTACACTATCAAGGACGTGAACTGAGGGAGGCGCCAGCGCCAATTGGGTATCACTAA"};
    //char primer[] = "ATATTTTCTGGCCTACTTGG";

    char* targets[m] = {"AGAGCTGGGTGGTCAGGCTCGAGCAGTCGGTCAACATTTTCCTCACGGAATCGGTGATTATACTACTCAATACCGTGTACCGTGATCGGAACTACGCCAGGTTTTTTGTGCTGGAGACGATTGCCAGGGTGCCGTATTTC"};
    char primer[] = "ACTACTCAATACCGTGTACC";

    for(int p = 0; p < m; p++)
    {
        char *target = targets[p];
        //float temperature = calculateMeltingTemperature(target, primer, params); // SLOW!!!
        //printf("Temp (C): %.2f\n", temperature);
        char *complement = calculateComplement(primer, strlen(primer));
        BasePair *pairs = calculateThermodynamicAlignment(target, complement, params);
        //printf("Tm = %.2f °C \n", thermodynamic->meltingTemperature);
        //printf("dH = %.2f Kcal/mol\n", thermodynamic->dH/1000);
        //printf("dS = %.2f e.u (cal/K.mol)\n", thermodynamic->dS);
        //printf("dG = %.2f Kcal/mol at 37 °C\n", thermodynamic->dG/1000);
        /*for(int k = 0; k < 2; k++)
        {
            int i = pairs[k].i - 1;
            int j = pairs[k].j - 1;
            char c1 = target[i];
	    char c2 = complement[j];
	    float elongationEfficiency = calculateElongationEfficiency(c2, c1);
            printf("%d/%d %c/%c %.2f \n", i, j, target[i], complement[j], elongationEfficiency);
        }*/
        free(pairs);
        //printf("Tm = %.2f °C \n", calculateMeltingTemperature (target, primer, params));
        //printf("dG = %.2f Kcal/mol at 37 °C\n", calculateFreeEnergy(target, primer, params, t)/1000);
        // printf("%s\n", isPerfectComplement(target, primer)?"V":"F");
        //params->~PNNParams();
    }
    //char *seq = "CTGTGAAGGTATTGTGGA";
    //char *reverse = calculateReverse(seq, strlen(seq));
    //printf("%10s %12s %6s %6s %8s %10s %11s %21s \n%10s %12s %6s %6s %8s %10s %11s %21s\n",
//	"Target Id.", "Product size", "Primer", "Length", "Position", "GC Content", "Temperature", "Elongation Efficiency",
//	"----------", "------------", "------", "------", "--------", "----------", "-----------", "---------------------") ;
    //printf("%s\n", reverse);
    //printf("dG = %.2f Kcal/mol at 37 °C\n", calculateFreeEnergy(seq, reverse, params, t)/1000);
    // printf("%s\n", calculateReverseComplement(seq, strlen(seq)));

    return 0;
}
